[{"D:\\shhcomponents\\src\\index.tsx":"1","D:\\shhcomponents\\src\\reportWebVitals.ts":"2","D:\\shhcomponents\\src\\App.tsx":"3","D:\\shhcomponents\\src\\component\\Notification\\Notification.tsx":"4","D:\\shhcomponents\\src\\component\\Button\\sButton.tsx":"5"},{"size":500,"mtime":1607865297869,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1607865297869,"results":"8","hashOfConfig":"7"},{"size":778,"mtime":1608649223969,"results":"9","hashOfConfig":"7"},{"size":3516,"mtime":1608629890997,"results":"10","hashOfConfig":"7"},{"size":1508,"mtime":1608649151825,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1akl0qm",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"D:\\shhcomponents\\src\\index.tsx",[],["24","25"],"D:\\shhcomponents\\src\\reportWebVitals.ts",[],"D:\\shhcomponents\\src\\App.tsx",[],"D:\\shhcomponents\\src\\component\\Notification\\Notification.tsx",["26","27","28"],"import React, { Children, useState } from 'react';\r\nimport styles from './index.module.scss'\r\nimport cn from 'classnames'\r\nimport ReactDOM from 'react-dom';\r\nimport { useEffect } from 'react';\r\nimport App from '../../App';\r\nimport { info } from 'console';\r\nexport enum Color {\r\n    info = 'info',\r\n    success = 'success',\r\n    warning = 'warning',\r\n    error = 'error'\r\n}\r\nexport interface NotificationProps{\r\n    color?:Color,\r\n    onDelete?:Function,\r\n    autoClose?:boolean,\r\n}\r\nexport const Notification:React.FC<NotificationProps> = ({color = Color.info,autoClose=true,children,onDelete})=>{\r\n    const [isClosing,setIsClosing] = useState(false);\r\n    useEffect(() => {\r\n        if(isClosing){\r\n            const timer = setTimeout(()=>{\r\n                let element = document.getElementById('notifyContainer');\r\n                let elements = document.getElementById('5')\r\n                if(element &&elements){\r\n                    //@ts-ignore\r\n                    document.body.removeChild(element);\r\n                    //@ts-ignore\r\n                    document.body.removeChild(elements);\r\n                }\r\n            },300);\r\n            return () => {\r\n                clearTimeout(timer);\r\n              };\r\n        }\r\n      }, [isClosing]);\r\n      useEffect(() => {\r\n          if(autoClose){\r\n            const timer = setTimeout(()=>{\r\n               setIsClosing(true)\r\n            },5000);\r\n            return () => {\r\n                clearTimeout(timer);\r\n            }\r\n        }\r\n      }, [autoClose])\r\n    return ReactDOM.createPortal(\r\n        <div id=\"5\"  className={cn([\r\n            styles.container,\r\n            {\r\n              [styles.shrink]: isClosing,\r\n            },\r\n          ])}\r\n        >\r\n            <div className={cn([styles.notification,\r\n                                styles[color],\r\n                                {\r\n                                    [styles.slideIn]:!isClosing,\r\n                                    [styles.slideOut]:isClosing,            \r\n                                }])}>\r\n                {children}\r\n                <button type=\"button\" className={styles.closeButton} onClick={()=>{setIsClosing(true)}}>\r\n                    x\r\n                </button>\r\n            </div>\r\n        </div>\r\n    ,document.body)\r\n}\r\nfunction createContainer(): Element {\r\n    const portaId = \"notifyContainer\";\r\n    let element = document.querySelector(`#${portaId}`)\r\n    element = document.createElement('div');\r\n    element.setAttribute('id', portaId);\r\n    element.className = styles.container;\r\n    document.body.append(element);\r\n    return element;\r\n  }\r\n \r\nconst sMessage =(function(){\r\n   \r\n    const info =(children:any)=>{ \r\n        let container = createContainer();\r\n        ReactDOM.render(<Notification color={Color.info}>{children}</Notification>,container);  \r\n    }\r\n    const success =(children:any)=>{\r\n        let container = createContainer();\r\n        ReactDOM.render(<Notification color={Color.success}>{children}</Notification>,container);  \r\n    }\r\n    const warning =(children:any)=>{ \r\n        let container = createContainer();\r\n        ReactDOM.render(<Notification color={Color.warning}>{children}</Notification>,container);  \r\n    }\r\n    const error =(children:any)=>{\r\n        let container = createContainer();\r\n        ReactDOM.render(<Notification color={Color.error}>{children}</Notification>,container);  \r\n    }\r\n    return{\r\n        info,success,warning,error\r\n    }\r\n})()\r\n\r\n\r\nexport default sMessage;\r\n\r\n\r\n\r\n","D:\\shhcomponents\\src\\component\\Button\\sButton.tsx",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":1,"column":17,"nodeType":"35","messageId":"36","endLine":1,"endColumn":25},{"ruleId":"33","severity":1,"message":"37","line":6,"column":8,"nodeType":"35","messageId":"36","endLine":6,"endColumn":11},{"ruleId":"33","severity":1,"message":"38","line":7,"column":10,"nodeType":"35","messageId":"36","endLine":7,"endColumn":14},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"@typescript-eslint/no-unused-vars","'Children' is defined but never used.","Identifier","unusedVar","'App' is defined but never used.","'info' is defined but never used.","no-global-assign","no-unsafe-negation"]